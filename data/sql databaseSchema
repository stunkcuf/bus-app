-- PostgreSQL Schema for Bus Fleet Management System

-- Users table
CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(20) NOT NULL CHECK (role IN ('driver', 'manager')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Buses table
CREATE TABLE IF NOT EXISTS buses (
    id SERIAL PRIMARY KEY,
    bus_id VARCHAR(20) UNIQUE NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'maintenance', 'out_of_service')),
    model VARCHAR(100),
    capacity INTEGER DEFAULT 0,
    oil_status VARCHAR(20) DEFAULT 'good' CHECK (oil_status IN ('good', 'due', 'overdue')),
    tire_status VARCHAR(20) DEFAULT 'good' CHECK (tire_status IN ('good', 'worn', 'replace')),
    maintenance_notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Routes table
CREATE TABLE IF NOT EXISTS routes (
    id SERIAL PRIMARY KEY,
    route_id VARCHAR(20) UNIQUE NOT NULL,
    route_name VARCHAR(100) NOT NULL,
    description TEXT,
    positions JSONB DEFAULT '[]'::jsonb,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Students table
CREATE TABLE IF NOT EXISTS students (
    id SERIAL PRIMARY KEY,
    student_id VARCHAR(20) UNIQUE NOT NULL,
    name VARCHAR(100) NOT NULL,
    locations JSONB DEFAULT '[]'::jsonb,
    phone_number VARCHAR(20),
    alt_phone_number VARCHAR(20),
    guardian VARCHAR(100),
    pickup_time TIME,
    dropoff_time TIME,
    position_number INTEGER,
    route_id VARCHAR(20),
    driver VARCHAR(50),
    active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (driver) REFERENCES users(username) ON DELETE SET NULL
);

-- Route assignments table
CREATE TABLE IF NOT EXISTS route_assignments (
    id SERIAL PRIMARY KEY,
    driver VARCHAR(50) NOT NULL,
    bus_id VARCHAR(20) NOT NULL,
    route_id VARCHAR(20) NOT NULL,
    route_name VARCHAR(100),
    assigned_date DATE DEFAULT CURRENT_DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(driver),
    FOREIGN KEY (driver) REFERENCES users(username) ON DELETE CASCADE,
    FOREIGN KEY (bus_id) REFERENCES buses(bus_id) ON DELETE CASCADE,
    FOREIGN KEY (route_id) REFERENCES routes(route_id) ON DELETE CASCADE
);

-- Driver logs table
CREATE TABLE IF NOT EXISTS driver_logs (
    id SERIAL PRIMARY KEY,
    driver VARCHAR(50) NOT NULL,
    bus_id VARCHAR(20) NOT NULL,
    route_id VARCHAR(20) NOT NULL,
    date DATE NOT NULL,
    period VARCHAR(20) NOT NULL CHECK (period IN ('morning', 'afternoon', 'evening')),
    departure_time TIME,
    arrival_time TIME,
    mileage DECIMAL(10,2),
    attendance JSONB DEFAULT '[]'::jsonb,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(driver, date, period),
    FOREIGN KEY (driver) REFERENCES users(username) ON DELETE CASCADE
);

-- Bus maintenance logs table
CREATE TABLE IF NOT EXISTS bus_maintenance_logs (
    id SERIAL PRIMARY KEY,
    bus_id VARCHAR(20) NOT NULL,
    date DATE NOT NULL,
    category VARCHAR(50) NOT NULL,
    notes TEXT,
    mileage INTEGER,
    cost DECIMAL(10,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (bus_id) REFERENCES buses(bus_id) ON DELETE CASCADE
);

-- Company vehicles table (separate from buses)
CREATE TABLE IF NOT EXISTS vehicles (
    id SERIAL PRIMARY KEY,
    vehicle_id VARCHAR(20) UNIQUE NOT NULL,
    model VARCHAR(100),
    description TEXT,
    year VARCHAR(4),
    tire_size VARCHAR(50),
    license VARCHAR(20),
    oil_status VARCHAR(20) DEFAULT 'good' CHECK (oil_status IN ('good', 'needs_service', 'overdue')),
    tire_status VARCHAR(20) DEFAULT 'good' CHECK (tire_status IN ('good', 'worn', 'replace')),
    status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'maintenance', 'out_of_service')),
    maintenance_notes TEXT,
    serial_number VARCHAR(100),
    base VARCHAR(100),
    service_interval INTEGER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Activities table
CREATE TABLE IF NOT EXISTS activities (
    id SERIAL PRIMARY KEY,
    date DATE NOT NULL,
    driver VARCHAR(50) NOT NULL,
    trip_name VARCHAR(100) NOT NULL,
    attendance INTEGER DEFAULT 0,
    miles DECIMAL(10,2) DEFAULT 0,
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (driver) REFERENCES users(username) ON DELETE CASCADE
);

-- Create indexes for better performance
CREATE INDEX idx_buses_status ON buses(status);
CREATE INDEX idx_students_driver ON students(driver);
CREATE INDEX idx_students_route ON students(route_id);
CREATE INDEX idx_driver_logs_driver_date ON driver_logs(driver, date);
CREATE INDEX idx_maintenance_bus_date ON bus_maintenance_logs(bus_id, date);
CREATE INDEX idx_route_assignments_driver ON route_assignments(driver);

-- Create update triggers for updated_at columns
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_buses_updated_at BEFORE UPDATE ON buses
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_routes_updated_at BEFORE UPDATE ON routes
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_students_updated_at BEFORE UPDATE ON students
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_route_assignments_updated_at BEFORE UPDATE ON route_assignments
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_vehicles_updated_at BEFORE UPDATE ON vehicles
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Insert default admin user (password should be hashed in production)
INSERT INTO users (username, password, role) 
VALUES ('admin', 'adminpass', 'manager')
ON CONFLICT (username) DO NOTHING;

-- Insert sample data
INSERT INTO buses (bus_id, status, model, capacity, oil_status, tire_status) VALUES
('BUS001', 'active', 'Ford Transit', 20, 'good', 'good'),
('BUS002', 'active', 'Chevrolet Express', 25, 'due', 'good'),
('BUS003', 'maintenance', 'Toyota Coaster', 15, 'good', 'worn')
ON CONFLICT (bus_id) DO NOTHING;

INSERT INTO routes (route_id, route_name, description) VALUES
('RT001', 'Victory Square', 'Downtown Victory Square route'),
('RT002', 'Airportway', 'Airport way business district'),
('RT003', 'NELC', 'Northeast Learning Center route'),
('RT004', 'Irrigon', 'Irrigon community route'),
('RT005', 'PELC', 'Pacific Educational Learning Center'),
('RT006', 'Umatilla', 'Umatilla district route')
ON CONFLICT (route_id) DO NOTHING;
