package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"strings"
)

// importHandler handles Excel file imports with enhanced error handling
func importHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		renderTemplate(w, r, "import.html", map[string]interface{}{
			"ImportTypes": []ImportType{
				ImportTypeMileage,
				ImportTypeECSE,
				ImportTypeStudent,
				ImportTypeVehicle,
			},
			"CSRFToken": getSessionCSRFToken(r),
		})
		return
	}
	
	// Forward to mapping handler for column mapping
	importMappingHandler(w, r)
}

// importHistoryHandler shows import history
func importHistoryHandler(w http.ResponseWriter, r *http.Request) {
	// Get pagination parameters
	page, _ := strconv.Atoi(r.URL.Query().Get("page"))
	if page < 1 {
		page = 1
	}
	
	limit := 20
	offset := (page - 1) * limit
	
	// Get import type filter
	importType := r.URL.Query().Get("type")
	
	// Build query
	query := `SELECT import_id, import_type, file_name, file_size, total_rows, 
	                 successful_rows, failed_rows, error_count, warning_count, 
	                 summary, start_time, end_time, 
	                 EXTRACT(EPOCH FROM (end_time - start_time))::INTEGER as duration_seconds
	          FROM import_history`
	
	args := []interface{}{}
	conditions := []string{}
	
	if importType != "" {
		conditions = append(conditions, "import_type = $1")
		args = append(args, importType)
	}
	
	if len(conditions) > 0 {
		query += " WHERE " + strings.Join(conditions, " AND ")
	}
	
	query += " ORDER BY start_time DESC LIMIT $" + strconv.Itoa(len(args)+1) + " OFFSET $" + strconv.Itoa(len(args)+2)
	args = append(args, limit, offset)
	
	// Execute query
	rows, err := db.Query(query, args...)
	if err != nil {
		LogRequest(r).Error("Failed to query import history", err)
		SendError(w, ErrInternal("Failed to load import history", err))
		return
	}
	defer rows.Close()
	
	// Collect results
	var imports []map[string]interface{}
	for rows.Next() {
		var imp struct {
			ImportID        string
			ImportType      string
			FileName        string
			FileSize        int64
			TotalRows       int
			SuccessfulRows  int
			FailedRows      int
			ErrorCount      int
			WarningCount    int
			Summary         string
			StartTime       string
			EndTime         string
			DurationSeconds int
		}
		
		err := rows.Scan(&imp.ImportID, &imp.ImportType, &imp.FileName, &imp.FileSize,
			&imp.TotalRows, &imp.SuccessfulRows, &imp.FailedRows, &imp.ErrorCount,
			&imp.WarningCount, &imp.Summary, &imp.StartTime, &imp.EndTime, &imp.DurationSeconds)
		if err != nil {
			LogRequest(r).Error("Failed to scan import history row", err)
			continue
		}
		
		imports = append(imports, map[string]interface{}{
			"ImportID":       imp.ImportID,
			"ImportType":     imp.ImportType,
			"FileName":       imp.FileName,
			"FileSize":       imp.FileSize,
			"TotalRows":      imp.TotalRows,
			"SuccessfulRows": imp.SuccessfulRows,
			"FailedRows":     imp.FailedRows,
			"ErrorCount":     imp.ErrorCount,
			"WarningCount":   imp.WarningCount,
			"Summary":        imp.Summary,
			"StartTime":      imp.StartTime,
			"EndTime":        imp.EndTime,
			"Duration":       formatDuration(imp.DurationSeconds),
		})
	}
	
	// Get total count
	countQuery := "SELECT COUNT(*) FROM import_history"
	if importType != "" {
		countQuery += " WHERE import_type = $1"
	}
	
	var totalCount int
	if importType != "" {
		db.QueryRow(countQuery, importType).Scan(&totalCount)
	} else {
		db.QueryRow(countQuery).Scan(&totalCount)
	}
	
	// Calculate pagination
	totalPages := (totalCount + limit - 1) / limit
	
	// Render template
	renderTemplate(w, "import_history.html", map[string]interface{}{
		"Imports":     imports,
		"CurrentPage": page,
		"TotalPages":  totalPages,
		"ImportType":  importType,
		"HasPrev":     page > 1,
		"HasNext":     page < totalPages,
		"PrevPage":    page - 1,
		"NextPage":    page + 1,
	})
}

// importDetailsHandler shows details of a specific import
func importDetailsHandler(w http.ResponseWriter, r *http.Request) {
	importID := r.URL.Query().Get("id")
	if importID == "" {
		SendError(w, ErrBadRequest("Import ID is required"))
		return
	}
	
	// Get import details
	var imp struct {
		ImportID       string
		ImportType     string
		FileName       string
		FileSize       int64
		TotalRows      int
		SuccessfulRows int
		FailedRows     int
		ErrorCount     int
		WarningCount   int
		Summary        string
		StartTime      string
		EndTime        string
	}
	
	err := db.QueryRow(`
		SELECT import_id, import_type, file_name, file_size, total_rows, 
		       successful_rows, failed_rows, error_count, warning_count, 
		       summary, start_time, end_time
		FROM import_history
		WHERE import_id = $1
	`, importID).Scan(&imp.ImportID, &imp.ImportType, &imp.FileName, &imp.FileSize,
		&imp.TotalRows, &imp.SuccessfulRows, &imp.FailedRows, &imp.ErrorCount,
		&imp.WarningCount, &imp.Summary, &imp.StartTime, &imp.EndTime)
	
	if err != nil {
		LogRequest(r).Error("Failed to get import details", err)
		SendError(w, ErrNotFound("Import not found"))
		return
	}
	
	// Get errors
	errorRows, err := db.Query(`
		SELECT row_number, column_name, sheet_name, error_type, 
		       error_message, error_value, severity
		FROM import_errors
		WHERE import_id = $1
		ORDER BY row_number, column_name
	`, importID)
	
	if err != nil {
		LogRequest(r).Error("Failed to get import errors", err)
	}
	defer errorRows.Close()
	
	var errors []ImportError
	for errorRows.Next() {
		var e ImportError
		var rowNum sql.NullInt64
		var columnName, sheetName, errorValue sql.NullString
		
		err := errorRows.Scan(&rowNum, &columnName, &sheetName, &e.ErrorType,
			&e.Error, &errorValue, &e.Severity)
		if err != nil {
			continue
		}
		
		if rowNum.Valid {
			e.Row = int(rowNum.Int64)
		}
		if columnName.Valid {
			e.Column = columnName.String
		}
		if sheetName.Valid {
			e.Sheet = sheetName.String
		}
		if errorValue.Valid {
			e.Value = errorValue.String
		}
		
		errors = append(errors, e)
	}
	
	// Separate errors and warnings
	var errorList, warningList []ImportError
	for _, e := range errors {
		if e.Severity == "warning" {
			warningList = append(warningList, e)
		} else {
			errorList = append(errorList, e)
		}
	}
	
	// Render template
	renderTemplate(w, "import_details.html", map[string]interface{}{
		"Import":   imp,
		"Errors":   errorList,
		"Warnings": warningList,
	})
}

// importRollbackHandler handles rollback of imports
func importRollbackHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}
	
	importID := r.FormValue("import_id")
	if importID == "" {
		SendError(w, ErrBadRequest("Import ID is required"))
		return
	}
	
	// Check if rollback is available
	var rollbackAvailable bool
	var importType string
	err := db.QueryRow(`
		SELECT rollback_available, import_type
		FROM import_history
		WHERE import_id = $1 AND rollback_expires_at > CURRENT_TIMESTAMP
	`, importID).Scan(&rollbackAvailable, &importType)
	
	if err != nil || !rollbackAvailable {
		SendError(w, ErrBadRequest("Rollback not available for this import"))
		return
	}
	
	// Perform rollback based on import type
	tx, err := db.Begin()
	if err != nil {
		SendError(w, ErrInternal("Failed to start rollback", err))
		return
	}
	defer tx.Rollback()
	
	// Delete imported records
	tables := map[string]string{
		"mileage":  "mileage_records",
		"ecse":     "ecse_students",
		"student":  "students",
		"vehicle":  "vehicles",
	}
	
	if tableName, ok := tables[importType]; ok {
		_, err = tx.Exec(fmt.Sprintf("DELETE FROM %s WHERE import_id = $1", tableName), importID)
		if err != nil {
			LogRequest(r).Error("Failed to rollback import", err)
			SendError(w, ErrInternal("Rollback failed", err))
			return
		}
	}
	
	// Update import history
	_, err = tx.Exec(`
		UPDATE import_history
		SET rollback_available = FALSE,
		    summary = summary || ' (ROLLED BACK)'
		WHERE import_id = $1
	`, importID)
	
	if err != nil {
		LogRequest(r).Error("Failed to update import history", err)
		SendError(w, ErrInternal("Rollback failed", err))
		return
	}
	
	// Commit transaction
	if err = tx.Commit(); err != nil {
		SendError(w, ErrInternal("Failed to commit rollback", err))
		return
	}
	
	// Log rollback
	LogRequest(r).WithFields(map[string]interface{}{
		"import_id":   importID,
		"import_type": importType,
	}).Info("Import rolled back successfully")
	
	// Redirect to import history
	http.Redirect(w, r, "/import/history", http.StatusSeeOther)
}

// importAPIHandler provides JSON API for import operations
func importAPIHandler(w http.ResponseWriter, r *http.Request) {
	switch r.Method {
	case "GET":
		// Return import status
		importID := r.URL.Query().Get("id")
		if importID == "" {
			http.Error(w, "Import ID required", http.StatusBadRequest)
			return
		}
		
		// Get import result from database
		var result ImportResult
		// ... query database and populate result ...
		
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(result)
		
	case "POST":
		// Handle async import
		// ... implement async import handling ...
		
	default:
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
	}
}

// formatDuration formats duration in seconds to human-readable string
func formatDuration(seconds int) string {
	if seconds < 60 {
		return fmt.Sprintf("%ds", seconds)
	} else if seconds < 3600 {
		minutes := seconds / 60
		secs := seconds % 60
		return fmt.Sprintf("%dm %ds", minutes, secs)
	} else {
		hours := seconds / 3600
		minutes := (seconds % 3600) / 60
		return fmt.Sprintf("%dh %dm", hours, minutes)
	}
}