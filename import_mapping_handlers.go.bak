package main

import (
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"strings"
	"time"

	"github.com/xuri/excelize/v2"
)

// ImportSession stores temporary import data during mapping/preview
type ImportSession struct {
	SessionID    string
	ImportType   ImportType
	FileName     string
	FileData     []byte
	Headers      []string
	Rows         [][]string
	ColumnMap    map[string]int
	CreatedAt    string
}

// Store import sessions in memory (in production, use Redis or similar)
var importSessions = make(map[string]*ImportSession)

// importMappingHandler handles the column mapping interface
func importMappingHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}
	
	// Parse multipart form
	err := r.ParseMultipartForm(MaxFileSize)
	if err != nil {
		SendError(w, ErrBadRequest("File too large or invalid form data"))
		return
	}
	
	// Get import type
	importType := ImportType(r.FormValue("import_type"))
	
	// Get file
	file, header, err := r.FormFile("file")
	if err != nil {
		SendError(w, ErrBadRequest("No file provided"))
		return
	}
	defer file.Close()
	
	// Read file into memory for session
	fileData := make([]byte, header.Size)
	_, err = file.Read(fileData)
	if err != nil {
		SendError(w, ErrInternal("Failed to read file", err))
		return
	}
	
	// Reset file reader
	file.Seek(0, 0)
	
	// Open Excel file
	xlsx, err := excelize.OpenReader(file)
	if err != nil {
		SendError(w, ErrBadRequest("Invalid Excel file"))
		return
	}
	defer xlsx.Close()
	
	// Get first sheet
	sheets := xlsx.GetSheetList()
	if len(sheets) == 0 {
		SendError(w, ErrBadRequest("No sheets found in Excel file"))
		return
	}
	
	sheetName := sheets[0]
	rows, err := xlsx.GetRows(sheetName)
	if err != nil || len(rows) == 0 {
		SendError(w, ErrBadRequest("No data found in Excel file"))
		return
	}
	
	// Find header row
	headers, headerIndex := findBestHeaderRow(rows, importType)
	if headerIndex == -1 {
		SendError(w, ErrBadRequest("Could not identify header row"))
		return
	}
	
	// Get preview rows (up to 5 after header)
	previewRows := [][]string{}
	dataRows := [][]string{}
	for i := headerIndex + 1; i < len(rows) && len(previewRows) < 5; i++ {
		if !isEmptyRow(rows[i]) {
			previewRows = append(previewRows, rows[i])
			dataRows = append(dataRows, rows[i])
		}
	}
	
	// Store remaining rows
	for i := headerIndex + 1 + len(previewRows); i < len(rows); i++ {
		if !isEmptyRow(rows[i]) {
			dataRows = append(dataRows, rows[i])
		}
	}
	
	// Create session
	sessionID := generateImportID()
	session := &ImportSession{
		SessionID:  sessionID,
		ImportType: importType,
		FileName:   header.Filename,
		FileData:   fileData,
		Headers:    headers,
		Rows:       dataRows,
		CreatedAt:  time.Now().Format("2006-01-02 15:04:05"),
	}
	importSessions[sessionID] = session
	
	// Get field definitions
	requiredFields, optionalFields := getFieldDefinitions(importType)
	
	// Auto-map columns
	mappings := autoMapColumns(headers, importType)
	
	// Check for validation issues
	validationErrors := []string{}
	validationWarnings := []string{}
	
	// Check required fields
	for _, field := range requiredFields {
		if _, mapped := mappings[field.FieldName]; !mapped {
			validationErrors = append(validationErrors, 
				fmt.Sprintf("Required field '%s' is not mapped", field.DisplayName))
		}
	}
	
	// Render mapping template
	renderTemplate(w, "import_mapping.html", map[string]interface{}{
		"CSRFToken":          getCSRFToken(r),
		"SessionID":          sessionID,
		"ImportType":         importType,
		"FileName":           header.Filename,
		"SheetName":          sheetName,
		"RowCount":           len(dataRows),
		"Headers":            headers,
		"PreviewRows":        previewRows,
		"RequiredFields":     requiredFields,
		"OptionalFields":     optionalFields,
		"Mappings":           mappings,
		"ValidationErrors":   validationErrors,
		"ValidationWarnings": validationWarnings,
	})
}

// importPreviewHandler shows preview of import with validation
func importPreviewHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}
	
	// Get session
	sessionID := r.FormValue("session_id")
	session, exists := importSessions[sessionID]
	if !exists {
		SendError(w, ErrBadRequest("Import session expired"))
		return
	}
	
	// Get column mappings from form
	columnMap := make(map[string]int)
	for key, values := range r.Form {
		if strings.HasPrefix(key, "mapping_") && len(values) > 0 && values[0] != "" {
			fieldName := strings.TrimPrefix(key, "mapping_")
			// Find column index
			for i, header := range session.Headers {
				if header == values[0] {
					columnMap[fieldName] = i
					break
				}
			}
		}
	}
	
	session.ColumnMap = columnMap
	
	// Validate all rows
	validator := NewImportValidator(session.ImportType)
	previewData := []map[string]interface{}{}
	errors := []map[string]interface{}{}
	warnings := []map[string]interface{}{}
	
	validRows := 0
	invalidRows := 0
	warningRows := 0
	
	// Get mapped columns for display
	displayColumns := []string{}
	columnIndices := []int{}
	fields, _ := getAllFieldDefinitions(session.ImportType)
	
	for _, field := range fields {
		if idx, mapped := columnMap[field.FieldName]; mapped {
			displayColumns = append(displayColumns, field.DisplayName)
			columnIndices = append(columnIndices, idx)
		}
	}
	
	// Validate each row
	for rowNum, row := range session.Rows {
		rowData := map[string]interface{}{
			"RowNumber": rowNum + 2, // +1 for 0-index, +1 for header
			"Values":    []string{},
		}
		
		hasError := false
		hasWarning := false
		
		// Extract mapped values
		for _, idx := range columnIndices {
			value := ""
			if idx < len(row) {
				value = row[idx]
			}
			rowData["Values"] = append(rowData["Values"].([]string), value)
		}
		
		// Validate each mapped field
		for fieldName, colIdx := range columnMap {
			value := ""
			if colIdx < len(row) {
				value = row[colIdx]
			}
			
			if err := validator.ValidateField(fieldName, value); err != nil {
				hasError = true
				errors = append(errors, map[string]interface{}{
					"Row":     rowNum + 2,
					"Column":  session.Headers[colIdx],
					"Value":   value,
					"Message": err.Error(),
				})
			}
		}
		
		// Check for warnings (e.g., suspicious values)
		// Add custom warning logic here
		
		if hasError {
			rowData["Status"] = "invalid"
			invalidRows++
		} else if hasWarning {
			rowData["Status"] = "warning"
			warningRows++
			validRows++
		} else {
			rowData["Status"] = "valid"
			validRows++
		}
		
		previewData = append(previewData, rowData)
		
		// Limit preview to 100 rows
		if len(previewData) >= 100 {
			break
		}
	}
	
	// Render preview template
	renderTemplate(w, "import_preview.html", map[string]interface{}{
		"CSRFToken":    getCSRFToken(r),
		"SessionID":    sessionID,
		"TotalRows":    len(session.Rows),
		"ValidRows":    validRows,
		"InvalidRows":  invalidRows,
		"WarningRows":  warningRows,
		"Columns":      displayColumns,
		"PreviewData":  previewData,
		"Errors":       errors,
		"Warnings":     warnings,
	})
}

// importExecuteHandler performs the actual import
func importExecuteHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}
	
	// Get session
	sessionID := r.FormValue("session_id")
	session, exists := importSessions[sessionID]
	if !exists {
		SendError(w, ErrBadRequest("Import session expired"))
		return
	}
	
	// Get import options
	skipInvalid := r.FormValue("skip_invalid") == "on"
	stopOnError := r.FormValue("stop_on_error") == "on"
	ignoreWarnings := r.FormValue("ignore_warnings") == "on"
	forceImport := r.FormValue("force_import") == "true"
	
	// Create importer
	importer := NewExcelImporter(db, session.ImportType)
	
	// Set import options
	importer.SkipInvalid = skipInvalid || !forceImport
	importer.StopOnError = stopOnError
	importer.IgnoreWarnings = ignoreWarnings
	
	// Recreate file from session data
	file := strings.NewReader(string(session.FileData))
	header := &multipart.FileHeader{
		Filename: session.FileName,
		Size:     int64(len(session.FileData)),
	}
	
	// Set column mappings
	importer.ColumnMap = session.ColumnMap
	
	// Execute import
	result, err := importer.ImportFile(file, header)
	
	// Clean up session
	delete(importSessions, sessionID)
	
	if err != nil && result == nil {
		SendError(w, ErrInternal("Import failed", err))
		return
	}
	
	// Render result
	renderTemplate(w, "import_result.html", map[string]interface{}{
		"Result": result,
		"Error":  err,
	})
}

// autoMapHandler provides auto-mapping suggestions via API
func autoMapHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}
	
	var request struct {
		ImportType ImportType `json:"import_type"`
		Headers    []string   `json:"headers"`
	}
	
	if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
		http.Error(w, "Invalid request", http.StatusBadRequest)
		return
	}
	
	mappings := autoMapColumns(request.Headers, request.ImportType)
	
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"mappings": mappings,
	})
}

// Helper functions

// findBestHeaderRow attempts to identify the header row
func findBestHeaderRow(rows [][]string, importType ImportType) ([]string, int) {
	validator := NewImportValidator(importType)
	expectedHeaders := validator.GetExpectedHeaders()
	
	for i, row := range rows {
		if isLikelyHeaderRow(row, expectedHeaders) {
			return row, i
		}
	}
	
	// If no good match, return first non-empty row
	for i, row := range rows {
		if !isEmptyRow(row) {
			return row, i
		}
	}
	
	return nil, -1
}

// isLikelyHeaderRow checks if a row looks like headers
func isLikelyHeaderRow(row []string, expectedHeaders []string) bool {
	matches := 0
	for _, cell := range row {
		cellLower := strings.ToLower(strings.TrimSpace(cell))
		for _, expected := range expectedHeaders {
			if strings.Contains(cellLower, strings.ToLower(expected)) {
				matches++
				break
			}
		}
	}
	
	// Consider it a header if at least 30% match
	return float64(matches) >= float64(len(expectedHeaders))*0.3
}

// autoMapColumns attempts to automatically map columns
func autoMapColumns(headers []string, importType ImportType) map[string]string {
	mappings := make(map[string]string)
	fields, _ := getAllFieldDefinitions(importType)
	
	for _, field := range fields {
		for _, header := range headers {
			if isColumnMatch(header, field.FieldName, field.Aliases) {
				mappings[field.FieldName] = header
				break
			}
		}
	}
	
	return mappings
}

// isColumnMatch checks if a header matches a field
func isColumnMatch(header, fieldName string, aliases []string) bool {
	headerLower := strings.ToLower(strings.TrimSpace(header))
	
	// Check exact match
	if headerLower == strings.ToLower(fieldName) {
		return true
	}
	
	// Check if header contains field name
	if strings.Contains(headerLower, strings.ToLower(fieldName)) {
		return true
	}
	
	// Check aliases
	for _, alias := range aliases {
		if headerLower == strings.ToLower(alias) || 
		   strings.Contains(headerLower, strings.ToLower(alias)) {
			return true
		}
	}
	
	return false
}

// FieldDefinition defines a field for import
type FieldDefinition struct {
	FieldName    string
	DisplayName  string
	Description  string
	Required     bool
	Aliases      []string
	IsMapped     bool
	AutoMapped   bool
}

// getFieldDefinitions returns field definitions for an import type
func getFieldDefinitions(importType ImportType) (required, optional []FieldDefinition) {
	all, _ := getAllFieldDefinitions(importType)
	
	for _, field := range all {
		if field.Required {
			required = append(required, field)
		} else {
			optional = append(optional, field)
		}
	}
	
	return required, optional
}

// getAllFieldDefinitions returns all field definitions
func getAllFieldDefinitions(importType ImportType) ([]FieldDefinition, error) {
	switch importType {
	case ImportTypeMileage:
		return []FieldDefinition{
			{
				FieldName:   "vehicle_id",
				DisplayName: "Vehicle ID",
				Description: "Unique identifier for the vehicle",
				Required:    true,
				Aliases:     []string{"vehicle", "bus_id", "bus"},
			},
			{
				FieldName:   "beginning_mileage",
				DisplayName: "Beginning Mileage",
				Description: "Starting odometer reading",
				Required:    true,
				Aliases:     []string{"start_mileage", "begin_miles", "starting"},
			},
			{
				FieldName:   "ending_mileage",
				DisplayName: "Ending Mileage",
				Description: "Ending odometer reading",
				Required:    true,
				Aliases:     []string{"end_mileage", "end_miles", "ending"},
			},
			{
				FieldName:   "date",
				DisplayName: "Date",
				Description: "Date of the mileage report",
				Required:    false,
				Aliases:     []string{"report_date", "month"},
			},
		}, nil
		
	case ImportTypeECSE:
		return []FieldDefinition{
			{
				FieldName:   "name",
				DisplayName: "Student Name",
				Description: "Full name of the student",
				Required:    true,
				Aliases:     []string{"student_name", "full_name"},
			},
			{
				FieldName:   "dob",
				DisplayName: "Date of Birth",
				Description: "Student's date of birth",
				Required:    true,
				Aliases:     []string{"date_of_birth", "birthdate", "birth_date"},
			},
			{
				FieldName:   "phone",
				DisplayName: "Phone Number",
				Description: "Primary contact phone",
				Required:    true,
				Aliases:     []string{"phone_number", "contact", "telephone"},
			},
			{
				FieldName:   "address",
				DisplayName: "Address",
				Description: "Home address",
				Required:    false,
				Aliases:     []string{"home_address", "street"},
			},
			{
				FieldName:   "iep_status",
				DisplayName: "IEP Status",
				Description: "Has active IEP (Yes/No)",
				Required:    false,
				Aliases:     []string{"iep", "has_iep"},
			},
			{
				FieldName:   "speech_therapy",
				DisplayName: "Speech Therapy",
				Description: "Receives speech therapy (Yes/No)",
				Required:    false,
				Aliases:     []string{"speech", "st"},
			},
			{
				FieldName:   "occupational_therapy",
				DisplayName: "Occupational Therapy",
				Description: "Receives OT services (Yes/No)",
				Required:    false,
				Aliases:     []string{"ot", "occupational"},
			},
			{
				FieldName:   "physical_therapy",
				DisplayName: "Physical Therapy",
				Description: "Receives PT services (Yes/No)",
				Required:    false,
				Aliases:     []string{"pt", "physical"},
			},
		}, nil
		
	case ImportTypeStudent:
		return []FieldDefinition{
			{
				FieldName:   "name",
				DisplayName: "Student Name",
				Description: "Full name of the student",
				Required:    true,
				Aliases:     []string{"student_name", "full_name"},
			},
			{
				FieldName:   "grade",
				DisplayName: "Grade Level",
				Description: "Current grade (K, 1-12)",
				Required:    true,
				Aliases:     []string{"grade_level", "year"},
			},
			{
				FieldName:   "address",
				DisplayName: "Address",
				Description: "Home address",
				Required:    true,
				Aliases:     []string{"home_address", "street"},
			},
			{
				FieldName:   "phone",
				DisplayName: "Phone Number",
				Description: "Primary contact phone",
				Required:    true,
				Aliases:     []string{"phone_number", "contact", "telephone"},
			},
			{
				FieldName:   "guardian",
				DisplayName: "Guardian Name",
				Description: "Parent or guardian name",
				Required:    false,
				Aliases:     []string{"parent", "guardian_name"},
			},
			{
				FieldName:   "pickup_time",
				DisplayName: "Pickup Time",
				Description: "Morning pickup time",
				Required:    false,
				Aliases:     []string{"pick_up", "morning_time"},
			},
			{
				FieldName:   "dropoff_time",
				DisplayName: "Dropoff Time",
				Description: "Afternoon dropoff time",
				Required:    false,
				Aliases:     []string{"drop_off", "afternoon_time"},
			},
		}, nil
		
	case ImportTypeVehicle:
		return []FieldDefinition{
			{
				FieldName:   "vehicle_id",
				DisplayName: "Vehicle ID",
				Description: "Unique vehicle identifier",
				Required:    true,
				Aliases:     []string{"id", "vehicle_number"},
			},
			{
				FieldName:   "year",
				DisplayName: "Year",
				Description: "Vehicle model year",
				Required:    true,
				Aliases:     []string{"model_year", "yr"},
			},
			{
				FieldName:   "make",
				DisplayName: "Make",
				Description: "Vehicle manufacturer",
				Required:    true,
				Aliases:     []string{"manufacturer", "brand"},
			},
			{
				FieldName:   "model",
				DisplayName: "Model",
				Description: "Vehicle model name",
				Required:    true,
				Aliases:     []string{"model_name"},
			},
			{
				FieldName:   "vin",
				DisplayName: "VIN",
				Description: "Vehicle identification number",
				Required:    false,
				Aliases:     []string{"vin_number"},
			},
			{
				FieldName:   "license_plate",
				DisplayName: "License Plate",
				Description: "License plate number",
				Required:    false,
				Aliases:     []string{"license", "plate", "registration"},
			},
			{
				FieldName:   "status",
				DisplayName: "Status",
				Description: "Current status (active/maintenance/out_of_service)",
				Required:    false,
				Aliases:     []string{"vehicle_status"},
			},
		}, nil
		
	default:
		return nil, fmt.Errorf("unknown import type: %s", importType)
	}
}