func maint(

	// Create buses.json if it doesn't exist, and seed with some default data.
	if _, err := os.Stat("data/buses.json"); os.IsNotExist(err) {
		defaultBuses := []*Bus{
			{BusNumber: "1", Status: "active", Model: "Ford", Capacity: 20, OilStatus: "good", TireStatus: "good", MaintenanceNotes: ""},
			{BusNumber: "2", Status: "active", Model: "Chevy", Capacity: 25, OilStatus: "due", TireStatus: "good", MaintenanceNotes: "Oil change scheduled"},
			{BusNumber: "3", Status: "maintenance", Model: "Toyota", Capacity: 15, OilStatus: "good", TireStatus: "worn", MaintenanceNotes: "Brake inspection in progress"},
		}
		f, err := os.Create("data/buses.json")
		if err != nil {
			log.Fatalf("failed to create buses.json: %v", err)
		}
		defer f.Close()
		enc := json.NewEncoder(f)
		enc.SetIndent("", "  ") // Pretty print the JSON
		if err := enc.Encode(defaultBuses); err != nil {
			log.Fatalf("failed to encode buses to json: %v", err)
		}
		log.Println("Created and seeded data/buses.json")
	}

	// Create students.json if it doesn't exist
	if _, err := os.Stat("data/students.json"); os.IsNotExist(err) {
		defaultStudents := []Student{}
		f, err := os.Create("data/students.json")
		if err != nil {
			log.Fatalf("failed to create students.json: %v", err)
		}
		defer f.Close()
		enc := json.NewEncoder(f)
		enc.SetIndent("", "  ")
		if err := enc.Encode(defaultStudents); err != nil {
			log.Fatalf("failed to encode students to json: %v", err)
		}
		log.Println("Created data/students.json")
	}

	// Create routes.json if it doesn't exist, and seed with some default data.
	if _, err := os.Stat("data/routes.json"); os.IsNotExist(err) {
		routes := []Route{
			{
				RouteID: "1", 
				RouteName: "Victory Square", 
				Positions: []struct {
					Position int    `json:"position"`
					Student  string `json:"student"`
				}{{Position: 1, Student: "Alice"}, {Position: 2, Student: "Bob"}},
			},
			{
				RouteID: "2", 
				RouteName: "Airportway", 
				Positions: []struct {
					Position int    `json:"position"`
					Student  string `json:"student"`
				}{{Position: 1, Student: "Charlie"}, {Position: 2, Student: "David"}},
			},
		}
		f, err := os.Create("data/routes.json")
		if err != nil {
			log.Fatalf("failed to create routes.json: %v", err)
		}
		defer f.Close()
		enc := json.NewEncoder(f)
		enc.SetIndent("", "  ") // Pretty print the JSON
		if err := enc.Encode(routes); err != nil {
			log.Fatalf("failed to encode routes to json: %v", err)
		}
		log.Println("Created and seeded data/routes.json")
	}
	w http.ResponseWriter, r *http.Request) {
    user := getUserFromSession(r)
    if user == nil || user.Role != "manager" {
        http.Redirect(w, r, "/", http.StatusFound)
        return
    }
    if r.Method != http.MethodPost {
        http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
        return
    }

    r.ParseForm()
    logEntry := MaintenanceLog{
        BusNumber: r.FormValue("bus_number"),
        Date:      r.FormValue("date"),
        Category:  r.FormValue("category"),
        Notes:     r.FormValue("notes"),
    }
    mileage, _ := strconv.Atoi(r.FormValue("mileage"))
    logEntry.Mileage = mileage

    logs := loadMaintenanceLogs()
    logs = append(logs, logEntry)
    if err := saveMaintenanceLogs(logs); err != nil {
        http.Error(w, "Unable to save", http.StatusInternalServerError)
        return
    }
    http.Redirect(w, r, "/fleet", http.StatusFound)
}